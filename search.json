{"title":"AviSynth和x264压制笔记","date":"2022-05-20T07:57:48.000Z","url":"/2022/05/20/AviSynth和x264压制笔记/","tags":["AviSynth","x264","压制","视频"],"content":"使用avs2pipemod输出yuv420p管道feed给x264压制commands:-y4mp: 输出yuv420p至stdout-: 从stdout接收数据流作为输入--preset: Preset（效率预设）：效率预设值。在编码效率和编码速度(时间)之间进行取舍。越往右滑越慢。最快的 ultrafast 速度媲美 GPU 加速，最慢的 placebo 所需的时间可以是 ultrafast 的近百倍。Preset 越高，x264 的码率效率越高，意味着单位码率能做到的画质越好。采用你最大能忍受的预设值，一般推荐在 slow&#x2F;slower&#x2F;veryslow 三档。x264 会自动设置很多参数来调节你对速度与效率的取舍。vcb-s 所用的参数一般基于–preset “veryslow” --tune: Tuning（画质预设）画面预设值。告诉 x264 参数应该为哪种片源优化：None：默认设置，适合一般&#x2F;混合类的片源；Animation：动漫，动画（虽然实际高质量动漫 BDRip 极度不推荐）Film：电影。通常演唱会、非动漫特典，都采用这个预设。Grain：在噪点明显的源上，致力于保留噪点。注意这个模式在搭配 crf，尤其是低 crf，体积惊人，因为花费了很多码率来保留噪点。tune grain 往往比较适合极高码率的编码，因为其码率分配策略优先是细节保留，而不是编码效率。still image：静态画面，适合那种例如相册类的片源 --crf: Const Quality&#x2F;Const Ratefactor，crf 模式，固定质量模式。x264 用一种结合人心理学，估算出来的值，来衡量视频的目测质量，这就是 rf（ratefactor），用浮点数表示，0 为无损，越高质量越差。crf 就是在视频前后采用恒定的 rf，从而使得视频前后的目测质量几乎一致。crf 模式下，码率的时间分配效果是最理想的，也是最常用的模式。一般人常见的视频，crf 设置在 18-26 左右。通常采用 19-21.5 就能使得 Rip 看上去很不错。如果需要绝对好的质量可以降低到 16，但是码率也会很高。注意，crf 在搭配不同的参数前提下，实际造成的目测效果还是有差距的，甚至可能很大，因此不能一概的认为 crf 代表目视质量。命令行：–crf 23,23 是默认值。一般 vcb-s 用的 10bit 1080p BDRip，crf 选择在 16~18 之间。 --keyint: Maximum GOP Size，–keyint，规定了最远两个 IDR 帧之间的距离。--min-keyint: Minimum GOP Size，–min-keyint，规定了最近两个 IDR 帧之间的距离。--bframes: Number of B-Frames， 最大允许的连续 B 帧数量。这个值越大，编码时间稍有提高，对压缩率也有帮助。一般认为真人电影设置为 38，动漫设置为 612 左右比较合适。 --rc-lookahead: 设置为帧率的 3 倍，差不多是 70--merange: me&#x2F;subme&#x2F;me_range 三个选项，共同组成 ME 的参数组合。ME 是以编码时间换效率的另一套参数（之前是 –ref&#x2F;–bframes 构成的 Frame）。--psy-rd: Psy-rd Strength(–psy-rd)： 心理学优化强度。psy 相关是一种 x264 引入的主观优化：在欠码的时候，人眼宁愿看到失真，也不愿看到大范围的模糊。虽然这种失真对客观的还原度来说不利，但是它有利于保留画面纹理，编码前后的图像看上去违和感较低，细节锐度较好。--no-fast-pskip: 关闭Fast P Skip--aq-mode: Adaptive Quantizers，简称 AQ。没有 AQ，x264 会倾向于在平面和纹理处降低码率。造成的效果就是线条部分看上去还行，但是平面大幅度 block，纹理烂掉。AQ 的作用就是来防止码率在纹理和平面处被过分的降低。AQ Mode: 选择 AQ 的算法。Disable(aq-mode&#x3D;0,不用 aq)，Variance AQ(aq-mode&#x3D;1)和 Auto-Variance AQ(aq-mode&#x3D;2)。tMod 版 x264 还加了 mode&#x3D;3&#x2F;4&#x2F;5，只不过在 megui 中需要用自定义命令行来启用。一般来说，mode&#x3D;3 最好，最适合动漫，但是码率稍高；mode&#x3D;1 效果中等，比较安全，不容易出现教烂的帧。 mode&#x3D;2 比较省码率，但是偶尔容易出现烂帧。mode&#x3D;4 是由 2 优化而来，更保险一点。一般来说，日常压动漫就选 3，压真人特典选 1 或者 4 。-o: 输出。: Class clipImageSource(): 以图像序列作为输入源，以0001.png为文件名规则，导入0031.png至6668.png的所有帧。AssumeFPS(): 指明输入为30fpsLanczosResize(): 缩放视频为2560x1440pConvertToYUV420: 转换输出为yuv420使用FFmpeg输出yuv420p管道feed给svt-av1压制example: -framerate 30: 因为输入的是图片序列，所以需要指定帧率-loglevel quiet: 关闭FFmpeg的log输出，避免与编码器的log重叠--tune 0: 使编码器对VQ(Visual Quality)做优化使用FFmpeg裁剪视频example: 从1:38开始截取8s的视频，copy全部流且不重新封装，保存为cut.mp4。"},{"title":"Elden Ring存档跨账号迁移教程","date":"2022-03-01T17:22:34.000Z","url":"/2022/03/02/Elden Ring存档跨账号迁移教程/","tags":["游戏","Elden Ring"],"content":"教程游戏的存档位置在%AppData%\\Roaming\\EldenRing\\64位steam id\\ER0000.sl2，假设你有一个A账号的存档和一个B账号的存档，你想要把A存档迁移到B账号。游戏的存档内写入了你的steam id，在加载存档时如果检测到账号id不符或者完整性校验出错就会提示存档已损坏。知道了这一点后，我们接下来要做的就是将A存档的A账号steam id替换为B账号的steam id，并且修改校验和使校验保持正确。为了直接编辑存档，我们需要一个hex编辑器，例如我使用的HxD。首先需要一个B账号的存档来获取你的新steam id对应在游戏存档中的密文，只需点击开始新游戏创建号任务等进入游戏就可以存档退出了。使用hex编辑器打开你的B存档，跳转到**19003B4**处，记下从此处开始的16位B账号id密文。打开A账号的存档文件，进行和上面一样的操作，记下并复制A账号steam id密文，在文件中搜索此16位字符，找到文件中其他的A账号steam id所在处，并一一替换成先前记下的B账号steam id密文。（如果只有一个存档槽位的话，整个文件大概会有两处要修改）观察每处修改的密文所在位置属于的存档槽位，将修改后对应槽位的数据计算MD5校验和，生成的16位校验和填入每个槽位数据区块的前一行（如槽位1，计算从00000310到0028030F数据的MD5校验和，覆盖粘贴到00000300开始的地址处）。注意，extra额外校验区的数据宽度和存档槽位的数据宽度有所不同。存档的各槽位数据范围和最后的额外校验部分的偏移如下：修改完成后，另存为同名文件替换B账号下的存档即可。Enjoy! 关于额外校验区的结束偏移地址发现额外校验区的宽度和其他区不同后，写了个python脚本暴力穷举计算了一下，代码大致如下："},{"title":"Android编译指南","date":"2021-11-09T11:56:41.000Z","url":"/2021/11/09/Android编译指南/","tags":["编译","Android"],"content":"本文基于编译Android 12的流程编写，编译早期版本的Android需要的依赖和过程可能不同（如所需要的内存容量，是否需要额外安装JAVA等）。准备设备要求编译Android 12建议至少需要32G的物理内存和200G左右的硬盘空间用来存放源码和编译产物。如果没有那么多的物理内存，也可以考虑采用16G的物理内存加上约12G的swap来保证满足编译需求。关于硬盘，使用SSD存放源码的编译速度肯定会比HDD快上不少，选择什么主要还是看自己的条件。至于系统，那一般的Linux都是可以的。安装依赖如果你和我一样使用的是ArchLinux或者基于Arch并同样采用pacman包管理器的Manjaro，那么你只需安装打包好的元软件包aosp-devel以及lineageos-devel（即便是编译基于AOSP的rom也建议安装此包，因为设备树中的内容可能会需要此依赖）即可。如果是Ubuntu或是其他采用apt和其他包管理器的系统，则需要分别安装以下软件包：bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev。配置构建环境新建文件夹mkdir exthmui，创建一个文件夹，用于存放源码。安装repo工具同样的，如果你是ArchLinux，只需安装aur包yay repo即可。其他系统的话手动下载安装，参考：添加环境变量。开启ccache缓存工具加速编译更改目录为你期望的缓存存储路径。添加以下内容至你的~/.bashrc或者~/.zshrc文件来设置缓存大小限制。添加如下语句来启用缓存压缩：初始化源码仓库并同步这里以同步exTHmUI源码为例。也可以使用depth参数限定深度来节省空间。当然，你的机器如果在国内的话，魔法是必不可少的。准备好设备专用的仓库为了能够从源码中编译出专用于你的设备的rom，一般还需要三样东西：device tree，kernel以及vendor。vendor为从设备原厂rom中提取出的闭源二进制文件，如vendor_xiaomi_raphael，device tree即设备树，你可以自己从零开始bring up，不过第一次的话还是先找一个现成的来用，名称格式大概是像这样：device_xiaomi_raphael，同理，内核为kernel_xiaomi_raphael)。将以上仓库添加进源码根目录的.repo/local_manifests中的配置文件中后，重新repo sync，代码就准备好了。开始编译如lunch exthm_raphael-userdebug编译产物会生成在$OUT中。"},{"title":"关于从某些游戏提取的Live2d模型导入Facerig出错问题的解决办法","date":"2019-12-23T16:14:46.000Z","url":"/2019/12/24/关于从某些游戏提取的Live2d模型导入Facerig出错问题的解决办法/","tags":["Live2d","Facerig","折腾"],"content":"从某些游戏提取的Live2d导入Facerig会出现软件直接卡死的现象（模型格式为moc3，Cubism3.0标准）。方法经过半个晚上的试错，得出一暂时性办法。将模型文件夹内.json文件换行符从CRLF改为LF。删除模型文件夹内的montions文件夹（model.json内对应montions对应字段可删可不删）。效果预览关于提取，可以参照这篇博文。"},{"title":"VSCode配置C语言调试环境以及解决调试窗口一闪而过的问题","date":"2019-09-21T00:53:30.000Z","url":"/2019/09/21/VSCode配置C语言调试环境以及解决调试窗口一闪而过的问题/","tags":["编程","C","VSCode"],"content":"配置环境安装配置C/C++拓展如图，安装C/C++拓展。Ctrl+Shift+p打开命令窗口，选择C/C++:编辑配置(UI)更改Compiler path为MingW可执行文件所在目录(g++.exe,gcc.exe,gdb.exe所在目录)。更改InlelliSense Mode选项为gcc-x64。配置task.json、Launcher.json。打开你的C语言程序工作目录，Ctrl+Shift+p输入task，选择Tasks：Configure Default Build Task，配置如下注意将Command和cwd选项后的目录根据个人情况改为对应MingW可执行文件目录。Ctrl+SHift+p命令框输入launcher，选择Debug: Open Launcher.json，配置如下注意将miDebuggerPath一项改为你的gdb.exe所在目录。配置到此完成。使用方法正文在程序文件界面按Ctrl+Shift+B编译程序。编译完成后按F5并在左上角选择(Windows)Launcher运行程序。PS程序执行完毕不关闭窗口利用了cmd命令的/C参数。若是想设置Break Point进行断点测试，需要在运行程序前将配置切换为(gdb)Launcher。若是换用新的工作文件夹，将原文件夹下的.vscode文件夹拷贝过去就不用重新配置了。"},{"title":"Win10开机自动连接宽带(PPPOE)","date":"2019-09-03T02:12:24.000Z","url":"/2019/09/03/Win10开机自动连接宽带(PPPOE)/","tags":["计划任务"],"content":"引子利用Windowns计划任务在用户登录时执行cmd命令实现。正文在计算机上右键单击，点击管理→任务计划程序→创建基本任务。在名称栏填入“宽带连接”，触发器选择“当前用户登录时”，操作选择“启动程序”，程序或脚本填入rasdial 宽带连接 YourAccount YourPassword。随后完成设置向导结束操作。以后每次登录用户时可以看到命令提示符窗口一闪而过，你的宽带连接就完成了。"},{"title":"用 FL Studio自带插件Newtone给干声加颤音","date":"2019-07-28T03:31:12.000Z","url":"/2019/07/28/用FL Studio自带插件Newtone给干声加颤音/","tags":["音乐","FL Studio","Newtone"],"content":"在使用Melodyne调声的时候遇到了问题，Melodyne的Pitch工具仅支持对音符原有颤音曲线的幅度进行调整（包括颤音幅度和偏移），有很大局限。查询后，发现水果的自带的Newtone竟附带了高级颤音编辑功能,以前都没发现哈哈哈。使用过后感觉不错，在这里写一下做下备忘。进入正题首先进入水果，打开Newtone，推拽素材进入Newtone。导入后就可以看到一个个的音符了。在目标音符上双击，进入高级编辑模式。选择右上角剪刀工具内的Advanced edit vibrato选项。调整蓝色竖线来改变颤音频率。在音符左右侧按住鼠标左键移动分别调整音符左右侧的颤音音量。非常方便，做好之后保存就完事了。"},{"title":"尝试将Windows10+Archlinux双系统迁移至新ssd的记录3","date":"2019-07-21T14:54:21.000Z","url":"/2019/07/21/尝试将Windows10-Archlinux双系统迁移至新ssd的记录3/","tags":["折腾"],"content":"前一次尝试因为win10系统映像损坏而失败，这次我事先用dism备份好了系统盘映像，再次尝试。省略用Clonezilla(再生龙)克隆磁盘的步骤介绍，详细内容请参阅上篇记录。修复WIndows10使用Clonezilla克隆磁盘后关机，插入烧写有WinPE的u盘，进入PE系统。打开dism++，选择 恢复功能-系统还原。经过几分钟等待，弹出错误提示：系统盘空间已满。打开资源管理器查看系统盘，发现仅剩130M空间。无奈，格式化系统盘后用WinTool释放系统映像。经过漫长的等待（约30分钟），释放镜像完成，关机重启，成功进入系统。修复ArchLinux插入刻录有Arch iso的u盘，开机进入Arch安装环境。挂载分区执行以下命令将根分区挂载到/mnt：注：/dev/nvme0n1p7是我的linux系统所在分区。执行以下命令创建/boot文件夹并将引导分区挂载到上面：注：/dev/nvme0n1p1是我的EFI引导分区。配置fstab文件删除原来的fstab文件：创建新的fstab文件以在开机时自动挂载分区：Chroot将操作权交给硬盘上的Linux系统：修复Grub重新安装Grub：生成配置文件：重启调整bios进入bios将Grub的启动优先级调至Windows Boot Manager上方。保存修改并退出，重启就可以看到熟悉的Grub启动界面了，成功进入ArchLinux。终于算是将双系统迁移成功了。"},{"title":"尝试将Windows10+Archlinux双系统迁移至新ssd的记录2","date":"2019-07-15T12:43:18.000Z","url":"/2019/07/15/尝试将Windows10-Archlinux双系统迁移至新ssd的记录2/","tags":["折腾"],"content":"前一次尝试因为dd命令的问题而以失败告终。在网上多方查询dd的替代品，让我找到了Clonezilla（再生龙）。Clonezilla（再生龙）是一款台湾友人编写的免费开源磁盘镜像制作和克隆软件。制作CLonezilla LiveCD启动盘需要闲置u盘一枚，以及在Clonezilla官网下载的镜像iso文件。建议下载alternativestable版本，其中包含了一些额外的软件包以及UEFI支持，而stable版本则不包含这些内容。使用Usbwriter将iso文件写入u盘制作LiveCD介质。注意：这项操作将会清除u盘的所有数据，注意备份。开始第二次尝试重启进入bios，将UEFI USB DISK设为第一启动项，保存修改并退出，进入Clonezilla。选择简体中文键盘布局默认为“美国”，回车就好。选择“启动再生龙”进入图形界面。选择第二项“硬盘/分区复制到硬盘/分区”。选择从硬盘克隆到硬盘。选择专家模式。选择手动调整分区，高级选项按需调整，进入Linux环境的命令行。使用fdisk在目标磁盘/dev/nvme0n1上创建和原磁盘/dev/sdb顺序和类型一致的分区，我在这里将分区适当扩大了。输入两次y跳过警告后克隆开始。开机等待10分钟后，克隆完成，关机。拆开机器，取下原sata ssd，开机。果然无法启动…（咳咳咳）插入烧录有WinPE的u盘，打开cmd，输入J盘在pe中被挂载为原windows启动盘，G盘被挂载为EFI启动分区。J:\\Windows为win10系统所在目录，/s指定引导分区，/f指定引导类型，/l指定地区语言。重启，跳过磁盘检查，成功进入Windows系统。不过，很快我就发现，系统有比较严重的问题。首先是频繁弹出的错误提示。用同目录下的machine.config.default替换machine.config后错误提示消失，但是可以发现系统仍然有严重问题，例如oem预装的的游戏控制中心无限加载。尝试用dism检查系统映像完整性，结果是没问题。随后尝试用msdn的iso镜像覆盖安装系统修复，安装发生错误终止。后续多方折腾尝试修复无果，无奈只有将原硬盘插了回去，进入原硬盘上的系统，用dism++备份系统镜像，来日再次尝试。"},{"title":"尝试将Windows10+Archlinux双系统迁移至新ssd的记录1","date":"2019-07-14T16:21:11.000Z","url":"/2019/07/15/尝试将Windows10-Archlinux双系统迁移至新ssd的记录1/","tags":["折腾"],"content":"引子这要从这两天日本对韩国发动经济战开始（不是x估摸着ssd今后一段时间只会涨不会跌，要知道上一次ssd在现在这个价位已是几年前，跌了几年才终于跌回上一次涨价前的水平。考虑再三，入手一条三星pm981a，512g，花费489a大洋，每G不到1块，应该来讲是挺划算的了。初尝试固态到手，立马拆开笔记本后盖装上。开机进入win查看写入量和通电次数，顺便跑个分。目标：将win10和Archlinux迁移至新的ssd，并重新调整各分区大小。初步设想：在普通Linux环境或Livecd环境下用fdisk解决分区问题，用dd命令克隆磁盘分区。重启进入Archlinux，终端输入sudo fdisk -l查看磁盘及分区情况，可以看到新的磁盘被识别为/dev/nvmen0。新建gpt分区表初始化磁盘，使用fdisk分区并调整分区大小，忽略格式化操作（因为dd命令会将原分区全部信息无脑克隆至目标分区，包括分区类型）。如此之后使用dd依次克隆对应分区，例如：sudo dd if=/dev/sdb1 of=/dev/nvmen0p1，欲验证效果，遂停止操作，重启进入win10。在磁盘管理下可以看到克隆出的H盘为150G，但资源管理器中将H盘识别为110G，与原盘完全一致。（这是dd无脑复制的后遗症）问题难以解决，进度暂停。下一步想法：尝试用e2fsck+resize2fs修复分区。使用DiskGenius。使用Clonezilla（再生龙）。"},{"title":"Test1","date":"2019-07-12T15:00:11.000Z","url":"/2019/07/12/Test1/","tags":["Test1","Test2"],"categories":["T1","T2","T3"],"content":"blockquote&emsp;&emsp; 科学并不会成为一种信仰，因为它的属性代表的本身就是一种怀疑和突破。刘慈欣——谈话&emsp;&emsp;“天安门上的毛主席像，是否要永远保留下去？”&emsp;&emsp;“永远要保留下去，”邓的回答斩钉截铁，“我们不但要把毛主席的项永远挂在天安门前，作为我们国家的象征，而且还要坚持毛泽东思想。我们不会像赫鲁晓夫对待斯大林那样对待毛主席。”邓小平——1980年8月21日，意大利女记者奥琳埃娜·法拉奇提问邓小平normal md quote&emsp;&emsp;“天安门上的毛主席像，是否要永远保留下去？”&emsp;&emsp;“永远要保留下去，”邓的回答斩钉截铁，“我们不但要把毛主席的项永远挂在天安门前，作为我们国家的象征，而且还要坚持毛泽东思想。我们不会像赫鲁晓夫对待斯大林那样对待毛主席。”——1980年8月21日，意大利女记者奥琳埃娜·法拉奇提问邓小平codeblocknormal md codeblockquotequotequoteTitleTitle in titleTitle in title in title"}]